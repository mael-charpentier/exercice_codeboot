# inspired from https://github.com/belmarca/codeboot-presentation

DEBUG = True
VERSION = "0.0"

from js import console
from markdown import split_markdown, parse_front_matter

# 'new' is not supported by the grammar
converter = host_eval("new showdown.Converter()")
converter.setOption('parseImgDimensions', True)
console.log(converter)

getCodeBootVM = \getCodeBootVM

vm = getCodeBootVM()
cb = \CodeBoot.prototype.cb
vms = cb.vms


exercise_div = document.createElement("div")
exercise_div.id = "exercise"

def el_with_class(el, cls):
    """Create an element 'el' with class 'cls'"""
    el = document.createElement(el)
    el.classList.add(cls)
    return el

def generate_exercise(markdown, info, actions):
    global converter
    
    template = read_file("exercise.html")

    exercise_id = "exercise_" + str(info["current_index"]+1)

    # Split the markdown for processing
    front_matter, title, subtitle, content = split_markdown(markdown)

    # TODO Add logic for this
    if front_matter:
        front_matter = parse_front_matter(front_matter)

    main_content = converter.makeHtml(content)

    prof = info["prof"]
    chapter = info["chapter"]
    exercise = info["exercise"]
    all_exercises = info["all_exercises"]
    current_index = info["current_index"]
    
    all_exo = ""
    for ex in all_exercises:
        all_exo += f'<a class="exercise-link"\n'
        all_exo += f'   href="/{ prof }/{ chapter }/{ ex }"\n'
        all_exo += f'   data-key="{ prof }_{ chapter }_{ ex }"\n'
        if ex == exercise:
            all_exo += f'       current-exercise-link"\n'
        all_exo += f'>'
        all_exo += f'{ ex }'
        all_exo += f'</a>'
    
    params = { # TODO
        "exercise_id": exercise_id,
        "prof": prof,
        "chapter": chapter,
        "exercise": exercise,
        "all_exercises": all_exercises,
        "current_index": current_index,
        "html_content": main_content,
        "previous_button": f'<a class="nav-button" href="/{ prof }/{ chapter }/{ all_exercises[current_index - 1] }">← Previous</a>' if current_index > 0 else '',
        "next_button": f'<a class="nav-button" href="/{ prof }/{ chapter }/{ all_exercises[current_index + 1] }">Next →</a>' if current_index + 1 < len(all_exercises) else '',
        "all_exo" : all_exo
    }
    
    exercise_div = HTMLElement_from_html(template.format(**params))

    document.getElementById('exercise').innerHTML = exercise_div.innerHTML
    
    
    exercise = document.getElementById(exercise_id) # TODO
    print(exercise_id)
    breakpoint()
    for action in actions:
        action(exercise, current_index + 1)

def action_populate_code_elements(exercise, i): # TODO
    """Populates code elements with code from the codeBoot filesystem if
    the first line is a filename ending in '.py'.

    `inline code`

    vs

    ```
    file_name.py
    ```
    """
    global cb, vm, vms
    elts = exercise.querySelectorAll("code")
    for id_example, el in enumerate(elts):
        parent = el.parentElement # pre element generated by showdown
        parent.style.display = "inline-block"
        
        
        code = el.innerHTML
        
        file_name = "example_" + str(id_example+1) + ".py"

        div = document.createElement('div')
        div.id = file_name
        write_file(file_name, code)
        show_file(file_name, False)
        
        fs = vm.fs
        file = fs.getByName(file_name)
        fe = file['fe']
        # We must first enable the file editor
        fe.enable()
        file.setReadOnly(True)


        html = fe.textEditor.toHTML()

        # Populate with the CodeMirror-generated HTML code
        div.innerHTML = html
        div.classList.add("cb-example-code")

        add_floating_icon(div, file_name)
        parent.replaceWith(div)

def add_floating_icon(div, file_name):
    btn = HTMLElement_from_html('<button class="btn btn-secondary cb-button" type="button"></button>')
    btn.onclick = lambda evt: open_run_example_file(file_name)
    svg = HTMLElement_from_html(vm.getImage('clone')) # TODO : change icon
    btn.style.position = "absolute"
    btn.style.top = "0px"
    btn.style.right = "0px"
    btn.appendChild(svg)
    div.appendChild(btn)

def open_run_example_file(file_name):
    show_file(file_name, True)
    exec(f"import {file_name[:-3]}")
    sys_modules = host_eval("new PyForeign(rte.sys_modules)")
    sys_modules.pop(file_name[:-3], None)



def HTMLElement_from_html(html, strip=True):
    html = html.strip() if strip else html

    if not html: return None

    template = document.createElement("template")
    template.innerHTML = html
    result = template.content.children

    if len(result) == 1:
        return result[0]
    return result

def get_wh(code):
    """Calculate the number of lines (height) and maximum line length (width)
    of a piece of code."""
    lines = code.split("\n")
    height = "calc(" + str(round(len(lines) * 1.5)) + " * 18px)"
    width = "calc(" + str(round(max(map(len, lines)) * 1.5)) + " * 18px)"

    # The line height is 1.4 + some room
    # Char pixel width will be 1px * 1em
    return width, height

def set_css():
    css = read_file("style.css")
    style = document.getElementById("presentation_css")
    if style is None:
        style = document.createElement("style")
        style.id = "presentation_css"
        style.innerHTML = css
        document.head.appendChild(style)
        return
    style.innerHTML = css

def set_metadata():
    global VERSION
    meta = document.createElement('meta')
    meta.name = "cb-presentation-version"
    meta.content = VERSION
    document.head.appendChild(meta)

actions = [
    action_populate_code_elements
]

def init():
    #playground.appendChild(exercise_div)
    document.body.insertAdjacentElement('beforeend', exercise_div)
    # Required for the element to be selectable
    exercise_div.setAttribute("tabindex", 0)
    set_css()
    set_metadata()
    markdown = read_file("exercise.md")
    info = {
        "prof": "prof1",
        "chapter": "ch1",
        "exercise": "ex1",
        "all_exercises": ["ex1", "ex2", "ex3"],
        "current_index": 0
    }
    generate_exercise(markdown, info, actions)
    #vm.setHidden() # TODO : change position vm + remove some action
    exercise_div.focus()
    
    # TODO : create file example

init()